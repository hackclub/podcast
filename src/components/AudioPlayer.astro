---
const { audioUrl, title } = Astro.props;
---

<div id="audio-player-container">
    <audio src={audioUrl} preload="metadata"></audio>
    <button id="play-icon"></button>
    <span id="current-time" class="time">0:00</span>
    <input type="range" id="seek-slider" max="100" value="0" />
    <span id="duration" class="time">0:00</span>
</div>

<script>
    /* Implementation of the presentation of the audio player */
    import lottieWeb from "lottie-web";

    const playIconContainer = document.getElementById("play-icon");
    const audioPlayerContainer = document.getElementById(
        "audio-player-container"
    );
    const seekSlider = document.getElementById("seek-slider");
    const volumeSlider = document.getElementById("volume-slider");
    const muteIconContainer = document.getElementById("mute-icon");
    let playState = "play";
    let muteState = "unmute";

    const playAnimation = lottieWeb.loadAnimation({
        container: playIconContainer,
        path: "/pp.json",
        renderer: "svg",
        loop: false,
        autoplay: false,
        name: "Play Animation",
    });

    playAnimation.goToAndStop(14, true);

    playIconContainer.addEventListener("click", () => {
        if (playState === "play") {
            audio.play();
            playAnimation.playSegments([14, 27], true);
            requestAnimationFrame(whilePlaying);
            playState = "pause";
        } else {
            audio.pause();
            playAnimation.playSegments([0, 14], true);
            cancelAnimationFrame(raf);
            playState = "play";
        }
    });

    const showRangeProgress = (rangeInput) => {
        if (rangeInput === seekSlider)
            audioPlayerContainer.style.setProperty(
                "--seek-before-width",
                (rangeInput.value / rangeInput.max) * 100 + "%"
            );
        else
            audioPlayerContainer.style.setProperty(
                "--volume-before-width",
                (rangeInput.value / rangeInput.max) * 100 + "%"
            );
    };

    seekSlider.addEventListener("input", (e) => {
        showRangeProgress(e.target);
    });

    /* Implementation of the functionality of the audio player */

    const audio = document.querySelector("audio");
    const durationContainer = document.getElementById("duration");
    const currentTimeContainer = document.getElementById("current-time");
    let raf = null;

    const calculateTime = (secs) => {
        const minutes = Math.floor(secs / 60);
        const seconds = Math.floor(secs % 60);
        const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;
        return `${minutes}:${returnedSeconds}`;
    };

    const displayDuration = () => {
        durationContainer.textContent = calculateTime(audio.duration);
    };

    const setSliderMax = () => {
        seekSlider.max = Math.floor(audio.duration);
    };

    const whilePlaying = () => {
        seekSlider.value = Math.floor(audio.currentTime);
        currentTimeContainer.textContent = calculateTime(seekSlider.value);
        audioPlayerContainer.style.setProperty(
            "--seek-before-width",
            `${(seekSlider.value / seekSlider.max) * 100}%`
        );
        raf = requestAnimationFrame(whilePlaying);
    };

    if (audio.readyState > 0) {
        displayDuration();
        setSliderMax();
    } else {
        audio.addEventListener("loadedmetadata", () => {
            displayDuration();
            setSliderMax();
        });
    }

    seekSlider.addEventListener("input", () => {
        currentTimeContainer.textContent = calculateTime(seekSlider.value);
        if (!audio.paused) {
            cancelAnimationFrame(raf);
        }
    });

    seekSlider.addEventListener("change", () => {
        audio.currentTime = seekSlider.value;
        if (!audio.paused) {
            requestAnimationFrame(whilePlaying);
        }
    });

    /* Implementation of the Media Session API */
    if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
            title: { title },
            artist: "The Orpheus Show",
            artwork: [
                {
                    src: "/Cover.png",
                    sizes: "96x96",
                    type: "image/png",
                },
                {
                    src: "/Cover.png",
                    sizes: "128x128",
                    type: "image/png",
                },
                {
                    src: "/Cover.png",
                    sizes: "192x192",
                    type: "image/png",
                },
                {
                    src: "/Cover.png",
                    sizes: "256x256",
                    type: "image/png",
                },
                {
                    src: "/Cover.png",
                    sizes: "384x384",
                    type: "image/png",
                },
                {
                    src: "/Cover.png",
                    sizes: "512x512",
                    type: "image/png",
                },
            ],
        });
        navigator.mediaSession.setActionHandler("play", () => {
            if (playState === "play") {
                audio.play();
                playAnimation.playSegments([14, 27], true);
                requestAnimationFrame(whilePlaying);
                playState = "pause";
            } else {
                audio.pause();
                playAnimation.playSegments([0, 14], true);
                cancelAnimationFrame(raf);
                playState = "play";
            }
        });
        navigator.mediaSession.setActionHandler("pause", () => {
            if (playState === "play") {
                audio.play();
                playAnimation.playSegments([14, 27], true);
                requestAnimationFrame(whilePlaying);
                playState = "pause";
            } else {
                audio.pause();
                playAnimation.playSegments([0, 14], true);
                cancelAnimationFrame(raf);
                playState = "play";
            }
        });
        navigator.mediaSession.setActionHandler("seekbackward", (details) => {
            audio.currentTime = audio.currentTime - (details.seekOffset || 10);
        });
        navigator.mediaSession.setActionHandler("seekforward", (details) => {
            audio.currentTime = audio.currentTime + (details.seekOffset || 10);
        });
        navigator.mediaSession.setActionHandler("seekto", (details) => {
            if (details.fastSeek && "fastSeek" in audio) {
                audio.fastSeek(details.seekTime);
                return;
            }
            audio.currentTime = details.seekTime;
        });
        navigator.mediaSession.setActionHandler("stop", () => {
            audio.currentTime = 0;
            seekSlider.value = 0;
            audioPlayerContainer.style.setProperty("--seek-before-width", "0%");
            currentTimeContainer.textContent = "0:00";
            if (playState === "pause") {
                playAnimation.playSegments([0, 14], true);
                cancelAnimationFrame(raf);
                playState = "play";
            }
        });
    }
</script>

<style>
    button {
        padding: 0;
        border: 0;
        background: transparent;
        cursor: pointer;
        outline: none;
        width: max-content;
        height: max-content;
        max-width: 30px;
    }
    #audio-player-container {
        --seek-before-width: 0%;
        --volume-before-width: 100%;
        --buffered-width: 0%;
        max-width: 800px;
        padding: 0.25rem;
        padding-left: 0.5rem;
        padding-right: 0.65rem;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
        color: white;
        border: 1px solid white;
        border-radius: 6px;
    }

    path {
        stroke: #ec3750 !important;
        color: #ec3750 !important;
    }
    .time {
        display: inline-block;
        text-align: center;
        font-size: 20px;
    }
    output {
        display: inline-block;
        width: 32px;
        text-align: center;
        font-size: 20px;
        float: left;
        clear: left;
    }

    #volume-slider::-webkit-slider-runnable-track {
        background: #8c2231;
    }
    #volume-slider::-moz-range-track {
        background: #8c2231;
    }
    #volume-slider::-ms-fill-upper {
        background: #8c2231;
    }

    input[type="range"] {
        -webkit-appearance: none;
        margin: 0;
        padding: 0;
        height: 19px;
        outline: none;
        background: transparent;
        max-width: 700px;
        width: 100%;
    }
    input[type="range"]::-webkit-slider-runnable-track {
        width: 100%;
        height: 3px;
        cursor: pointer;
        background: #8c2231;
    }
    input[type="range"]::before {
        position: absolute;
        content: "";
        top: 8px;
        left: 0;
        width: var(--seek-before-width);
        height: 3px;
        background-color: #ec3750;
        cursor: pointer;
    }
    input[type="range"]::-webkit-slider-thumb {
        position: relative;
        -webkit-appearance: none;
        box-sizing: content-box;
        border: 1px solid #ec3750;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        cursor: pointer;
        margin: -7px 0 0 0;
    }
    input[type="range"]:active::-webkit-slider-thumb {
        transform: scale(1.2);
        background: #ec3750;
    }
    input[type="range"]::-moz-range-track {
        width: 100%;
        height: 3px;
        cursor: pointer;
        background: #8c2231;
    }
    input[type="range"]::-moz-range-progress {
        background-color: #ec3750;
    }
    input[type="range"]::-moz-focus-outer {
        border: 0;
    }
    input[type="range"]::-moz-range-thumb {
        box-sizing: content-box;
        border: 1px solid #ec3750;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        cursor: pointer;
        background: #ec3750;
        transition: 0.1s ease;
    }
    input[type="range"]:active::-moz-range-thumb {
        transform: scale(1.2);
        background: #ec3750;
    }
    input[type="range"]::-ms-track {
        width: 100%;
        height: 3px;
        cursor: pointer;
        background: transparent;
        border: solid transparent;
        color: transparent;
    }
    input[type="range"]::-ms-fill-lower {
        background-color: #ec3750;
    }
    input[type="range"]::-ms-fill-upper {
        background: #ec3750;
    }
    input[type="range"]::-ms-thumb {
        box-sizing: content-box;
        border: 1px solid #ec3750;
        background: #ec3750;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        cursor: pointer;
        transition: 0.1s ease;
    }
    input[type="range"]:active::-ms-thumb {
        transform: scale(1.2);
        background: #ec3750;
    }
</style>
